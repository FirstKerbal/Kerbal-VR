@PROP[switchRotary_Backlight]
{
    // add a JSINumericInput module so the knob knows how to set the persistent variable
    MODULE:NEEDS[RasterPropMonitor]
    {
        name = JSINumericInput
        perPodPersistenceName = BackLight
        minValue = 0
        maxValue = 1
        defaultValue = 0
    }
}

@PROP:HAS[@MODEL:HAS[#model[ASET/ASET_Props/Control/SwitchRotary/model/Switch_Rotary_Model]]]
{
    MODULE
    {
        name = InternalCollider
        shapeType = Box
        parentTransformName = Switch_Rotary_Model
        colliderTransformName = swRotaryLoc
        boxDimensions = 0.015, 0.03, 0.03
    }

    MODULE
    {
        name = VRKnob
        knobTransformName = swRotaryLoc
        stepCount = 2
        stepSound = ASET/ASET_Props/Sounds/click-027
    }
}

@PROP:HAS[@MODEL:HAS[#model[ASET/ASET_Avionics/ModernPack/ASET_B-Knob/ASET_B-Knob_Model]]]
{
    MODULE
    {
        name = InternalCollider
        shapeType = Box
        parentTransformName = ASET_B-Knob_Model
        colliderTransformName = KnobGrp
        boxDimensions = 0.015, 0.03, 0.03
    }

    MODULE
    {
        name = VRKnob
        knobTransformName = KnobGrp
        stepCount = 2
        stepSound = ASET/ASET_Props/Sounds/click-027
    }
}

@PROP:HAS[@MODEL:HAS[#model[*_3_Marks]]]
{
    @MODULE[VRKnob]
    {
        @stepCount = 3
    }
}

@PROP:HAS[@MODEL:HAS[#model[*_4_Marks]]]
{
    @MODULE[VRKnob]
    {
        @stepCount = 4
    }
}

@PROP:HAS[@MODEL:HAS[#model[*_5_Marks]]]
{
    @MODULE[VRKnob]
    {
        @stepCount = 5
    }
}

@PROP:HAS[@MODEL:HAS[#model[*_6_Marks]]]
{
    @MODULE[VRKnob]
    {
        @stepCount = 6
    }
}

@PROP:HAS[@MODEL:HAS[#model[*_Dimmer_Mark]]]
{
    @MODULE[VRKnob]
    {
        @stepCount = 0
    }
}

// populate the VR data from MAS data

@PROP:HAS[@MODULE[VRKnob],@MODULE[MASComponent]:HAS[@ROTATION:HAS[#variable[fc.GetPersistentAsNumber*]]]]
{
    @MODULE[VRKnob]
    {
        // copy the variable text out of the rotation handler
        userVariable = #$../MODULE[MASComponent]/ROTATION/variable$
        // select the variable name
        @userVariable ^= :^fc\.GetPersistentAsNumber\("(.*)"\)$:$1:
    }
}

@PROP:HAS[@MODULE[VRKnob],@MODULE[MASComponent]:HAS[@COLLIDER_EVENT:HAS[#onClick[fc.Toggle*]]]]
{
    @MODULE[VRKnob]
    {
        // copy the onClick text out of the collider event
        customRotationHandler = #$../MODULE[MASComponent]/COLLIDER_EVENT/onClick$
        @customRotationHandler ^= :^fc\.Toggle(.*)\(\)$:$1:
    }
}

// handle knobs that are reversed from their source variables
@PROP:HAS[@MODULE[VRKnob],@MODULE[MASComponent]:HAS[@ROTATION:HAS[#variable[1?-?fc.Get*]]]]
{
    @MODULE[MASComponent]
    {
        @ROTATION
        {
            @range = 1,0 // interestingly, the MAS code always reorders these to low,high but this is how we tell the VR knob code that the range is inverted
        }
    }

}

// custom rotation handlers ----------------------------------------------------
// these are necessary for rotary switches that respond to single clicks
// rather than increment/decrement clicks

@PROP[SwitchRotary_SAS_SpeedMode_Selector-01|MAS_swRotary_3pos_SpeedMode]
{
    @MODULE[VRKnob]
    {
        %customRotationHandler = SpeedDisplayMode
    }
}

@PROP[ASET_B-Knob-THRUST_LIMIT|THRUST_LIMIT_Selector|MAS_ASET_B-Knob-THRUST_LIMIT|MAS_swRotary_6pos_ThrottleLimit]
{
    @MODULE[VRKnob]
    {
        %customRotationHandler = ThrustLimit
        @stepCount = 0
    }
}

@PROP[switchRotary_Backlight]
{
    -MODULE[JSIActionGroupSwitch] {}
    
    @MODULE[VRKnob]
    {
        @stepCount = 0
    }
}

@PROP[switchRotary_FlightDeckLight]
{
    @MODULE[VRKnob]
    {
        %customRotationHandler = IntLight
        @stepCount = 0
    }
}

@PROP[switchRotary_StageLock]
{
    @MODULE[VRKnob]
    {
        %customRotationHandler = StageLocked
    }
}

@PROP[SwitchRotary_Precision_Ctrl]
{
    @MODULE[VRKnob]
    {
        %customRotationHandler = PrecisionMode
    }
}